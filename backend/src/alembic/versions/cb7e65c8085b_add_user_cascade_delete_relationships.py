"""add_user_cascade_delete_relationships

Revision ID: cb7e65c8085b
Revises: a4ee77cd028b
Create Date: 2025-04-10 09:39:42.824296

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
import sqlmodel.sql.sqltypes
import uuid


# revision identifiers, used by Alembic.
revision = 'cb7e65c8085b'
down_revision = 'a4ee77cd028b'
branch_labels = None
depends_on = None


def clean_orphaned_records():
    """Clean up orphaned records that would violate new foreign key constraints"""
    connection = op.get_bind()

    orphaned_collections = connection.execute(
        text("SELECT id FROM collection WHERE user_id NOT IN (SELECT id FROM \"user\")")
    ).fetchall()

    if orphaned_collections:
        orphaned_ids = ",".join([f"'{str(c[0])}'" for c in orphaned_collections])
        connection.execute(text(f"DELETE FROM collection WHERE id IN ({orphaned_ids})"))
        print(f"Deleted {len(orphaned_collections)} orphaned collections")

    orphaned_sessions = connection.execute(
        text("SELECT id FROM practicesession WHERE user_id NOT IN (SELECT id FROM \"user\")")
    ).fetchall()

    if orphaned_sessions:
        orphaned_ids = ",".join([f"'{str(s[0])}'" for s in orphaned_sessions])
        connection.execute(text(f"DELETE FROM practicesession WHERE id IN ({orphaned_ids})"))
        print(f"Deleted {len(orphaned_sessions)} orphaned practice sessions")


def upgrade():
    clean_orphaned_records()

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(None, 'collection', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'practicesession', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'practicesession', type_='foreignkey')
    op.drop_constraint(None, 'collection', type_='foreignkey')
    # ### end Alembic commands ###
