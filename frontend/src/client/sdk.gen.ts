// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  FlashcardsReadCollectionsData,
  FlashcardsReadCollectionsResponse,
  FlashcardsCreateCollectionData,
  FlashcardsCreateCollectionResponse,
  FlashcardsReadCollectionData,
  FlashcardsReadCollectionResponse,
  FlashcardsUpdateCollectionData,
  FlashcardsUpdateCollectionResponse,
  FlashcardsDeleteCollectionData,
  FlashcardsDeleteCollectionResponse,
  FlashcardsReadCardsData,
  FlashcardsReadCardsResponse,
  FlashcardsCreateCardData,
  FlashcardsCreateCardResponse,
  FlashcardsReadCardData,
  FlashcardsReadCardResponse,
  FlashcardsDeleteCardData,
  FlashcardsDeleteCardResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  UsersReadUserMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
} from "./types.gen"

export class FlashcardsService {
  /**
   * Read Collections
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns CollectionList Successful Response
   * @throws ApiError
   */
  public static readCollections(
    data: FlashcardsReadCollectionsData = {},
  ): CancelablePromise<FlashcardsReadCollectionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/flashcards/collections/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Collection
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Collection Successful Response
   * @throws ApiError
   */
  public static createCollection(
    data: FlashcardsCreateCollectionData,
  ): CancelablePromise<FlashcardsCreateCollectionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/flashcards/collections/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Collection
   * @param data The data for the request.
   * @param data.collectionId
   * @returns Collection Successful Response
   * @throws ApiError
   */
  public static readCollection(
    data: FlashcardsReadCollectionData,
  ): CancelablePromise<FlashcardsReadCollectionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/flashcards/collections/{collection_id}",
      path: {
        collection_id: data.collectionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Collection
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.requestBody
   * @returns Collection Successful Response
   * @throws ApiError
   */
  public static updateCollection(
    data: FlashcardsUpdateCollectionData,
  ): CancelablePromise<FlashcardsUpdateCollectionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/flashcards/collections/{collection_id}",
      path: {
        collection_id: data.collectionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Collection
   * @param data The data for the request.
   * @param data.collectionId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteCollection(
    data: FlashcardsDeleteCollectionData,
  ): CancelablePromise<FlashcardsDeleteCollectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/flashcards/collections/{collection_id}",
      path: {
        collection_id: data.collectionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Cards
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.skip
   * @param data.limit
   * @returns CardList Successful Response
   * @throws ApiError
   */
  public static readCards(
    data: FlashcardsReadCardsData,
  ): CancelablePromise<FlashcardsReadCardsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/flashcards/collections/{collection_id}/cards/",
      path: {
        collection_id: data.collectionId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Card
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.requestBody
   * @returns Card Successful Response
   * @throws ApiError
   */
  public static createCard(
    data: FlashcardsCreateCardData,
  ): CancelablePromise<FlashcardsCreateCardResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/flashcards/collections/{collection_id}/cards/",
      path: {
        collection_id: data.collectionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Card
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.cardId
   * @returns Card Successful Response
   * @throws ApiError
   */
  public static readCard(
    data: FlashcardsReadCardData,
  ): CancelablePromise<FlashcardsReadCardResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/flashcards/collections/{collection_id}/cards/{card_id}",
      path: {
        collection_id: data.collectionId,
        card_id: data.cardId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Card
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.cardId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteCard(
    data: FlashcardsDeleteCardData,
  ): CancelablePromise<FlashcardsDeleteCardResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/flashcards/collections/{collection_id}/cards/{card_id}",
      path: {
        collection_id: data.collectionId,
        card_id: data.cardId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}
