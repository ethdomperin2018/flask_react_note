// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options as ClientOptions,
	type TDataShape,
	type Client,
	urlSearchParamsBodySerializer,
} from "@hey-api/client-axios";
import type {
	LoginLoginAccessTokenData,
	LoginLoginAccessTokenResponse,
	LoginLoginAccessTokenError,
	UsersReadUserMeData,
	UsersReadUserMeResponse,
	UsersRegisterUserData,
	UsersRegisterUserResponse,
	UsersRegisterUserError,
	FlashcardsReadCollectionsData,
	FlashcardsReadCollectionsResponse,
	FlashcardsReadCollectionsError,
	FlashcardsCreateCollectionData,
	FlashcardsCreateCollectionResponse,
	FlashcardsCreateCollectionError,
	FlashcardsReadCollectionData,
	FlashcardsReadCollectionResponse,
	FlashcardsReadCollectionError,
	FlashcardsUpdateCollectionData,
	FlashcardsUpdateCollectionResponse,
	FlashcardsUpdateCollectionError,
	FlashcardsReadCardsData,
	FlashcardsReadCardsResponse,
	FlashcardsReadCardsError,
	FlashcardsCreateCardData,
	FlashcardsCreateCardResponse,
	FlashcardsCreateCardError,
	FlashcardsReadCardData,
	FlashcardsReadCardResponse,
	FlashcardsReadCardError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
};

/**
 * Login Access Token
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(
	options: Options<LoginLoginAccessTokenData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		LoginLoginAccessTokenResponse,
		LoginLoginAccessTokenError,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		url: "/api/v1/login/access-token",
		...options,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			...options?.headers,
		},
	});
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
	options?: Options<UsersReadUserMeData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		UsersReadUserMeResponse,
		unknown,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/users/me",
		...options,
	});
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(
	options: Options<UsersRegisterUserData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		UsersRegisterUserResponse,
		UsersRegisterUserError,
		ThrowOnError
	>({
		url: "/api/v1/users/signup",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read Collections
 */
export const flashcardsReadCollections = <ThrowOnError extends boolean = false>(
	options?: Options<FlashcardsReadCollectionsData, ThrowOnError>,
) => {
	return (options?.client ?? _heyApiClient).get<
		FlashcardsReadCollectionsResponse,
		FlashcardsReadCollectionsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/",
		...options,
	});
};

/**
 * Create Collection
 */
export const flashcardsCreateCollection = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FlashcardsCreateCollectionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		FlashcardsCreateCollectionResponse,
		FlashcardsCreateCollectionError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read Collection
 */
export const flashcardsReadCollection = <ThrowOnError extends boolean = false>(
	options: Options<FlashcardsReadCollectionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		FlashcardsReadCollectionResponse,
		FlashcardsReadCollectionError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/{collection_id}",
		...options,
	});
};

/**
 * Update Collection
 */
export const flashcardsUpdateCollection = <
	ThrowOnError extends boolean = false,
>(
	options: Options<FlashcardsUpdateCollectionData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).put<
		FlashcardsUpdateCollectionResponse,
		FlashcardsUpdateCollectionError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/{collection_id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read Cards
 */
export const flashcardsReadCards = <ThrowOnError extends boolean = false>(
	options: Options<FlashcardsReadCardsData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		FlashcardsReadCardsResponse,
		FlashcardsReadCardsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/{collection_id}/cards/",
		...options,
	});
};

/**
 * Create Card
 */
export const flashcardsCreateCard = <ThrowOnError extends boolean = false>(
	options: Options<FlashcardsCreateCardData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).post<
		FlashcardsCreateCardResponse,
		FlashcardsCreateCardError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/{collection_id}/cards/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read Card
 */
export const flashcardsReadCard = <ThrowOnError extends boolean = false>(
	options: Options<FlashcardsReadCardData, ThrowOnError>,
) => {
	return (options.client ?? _heyApiClient).get<
		FlashcardsReadCardResponse,
		FlashcardsReadCardError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/v1/flashcards/collections/{collection_id}/cards/{card_id}",
		...options,
	});
};
